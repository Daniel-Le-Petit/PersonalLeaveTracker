"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/leaveUtils.ts":
/*!*********************************!*\
  !*** ./src/utils/leaveUtils.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FRENCH_HOLIDAYS_2024: function() { return /* binding */ FRENCH_HOLIDAYS_2024; },\n/* harmony export */   FRENCH_HOLIDAYS_2025: function() { return /* binding */ FRENCH_HOLIDAYS_2025; },\n/* harmony export */   LEAVE_TYPES: function() { return /* binding */ LEAVE_TYPES; },\n/* harmony export */   calculateAvailableCarryover: function() { return /* binding */ calculateAvailableCarryover; },\n/* harmony export */   calculateAvailableRTTForPeriod: function() { return /* binding */ calculateAvailableRTTForPeriod; },\n/* harmony export */   calculateCurrentAvailableRTT: function() { return /* binding */ calculateCurrentAvailableRTT; },\n/* harmony export */   calculateLeaveBalances: function() { return /* binding */ calculateLeaveBalances; },\n/* harmony export */   calculateLeaveStats: function() { return /* binding */ calculateLeaveStats; },\n/* harmony export */   calculateMonthlyLeaveSummarySeparated: function() { return /* binding */ calculateMonthlyLeaveSummarySeparated; },\n/* harmony export */   calculateWorkingDays: function() { return /* binding */ calculateWorkingDays; },\n/* harmony export */   canTakeRTTForMonth: function() { return /* binding */ canTakeRTTForMonth; },\n/* harmony export */   formatDate: function() { return /* binding */ formatDate; },\n/* harmony export */   frenchDateToISO: function() { return /* binding */ frenchDateToISO; },\n/* harmony export */   generateCalendarDays: function() { return /* binding */ generateCalendarDays; },\n/* harmony export */   generateCarryoverSummary: function() { return /* binding */ generateCarryoverSummary; },\n/* harmony export */   getHolidaysForYear: function() { return /* binding */ getHolidaysForYear; },\n/* harmony export */   getLeaveTypeColor: function() { return /* binding */ getLeaveTypeColor; },\n/* harmony export */   getLeaveTypeIcon: function() { return /* binding */ getLeaveTypeIcon; },\n/* harmony export */   getLeaveTypeLabel: function() { return /* binding */ getLeaveTypeLabel; },\n/* harmony export */   isHoliday: function() { return /* binding */ isHoliday; },\n/* harmony export */   isValidFrenchDate: function() { return /* binding */ isValidFrenchDate; },\n/* harmony export */   isoDateToFrench: function() { return /* binding */ isoDateToFrench; },\n/* harmony export */   validateLeavePeriod: function() { return /* binding */ validateLeavePeriod; }\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isAfter.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isWeekend.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/addDays.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isSameDay.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,isAfter,isBefore,isSameDay,isWeekend!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isBefore.js\");\n/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/locale */ \"(app-pages-browser)/./node_modules/date-fns/locale/fr.js\");\n\n\n// Configuration des types de congés\nconst LEAVE_TYPES = {\n    cp: {\n        label: \"Cong\\xe9s Pay\\xe9s\",\n        color: \"leave-cp\",\n        icon: \"\\uD83C\\uDFD6️\"\n    },\n    rtt: {\n        label: \"RTT\",\n        color: \"leave-rtt\",\n        icon: \"\\uD83D\\uDCC5\"\n    },\n    cet: {\n        label: \"CET\",\n        color: \"leave-cet\",\n        icon: \"\\uD83C\\uDFE5\"\n    },\n    sick: {\n        label: \"Maladie\",\n        color: \"leave-sick\",\n        icon: \"\\uD83C\\uDFE5\"\n    }\n};\n// Jours fériés français 2024\nconst FRENCH_HOLIDAYS_2024 = [\n    {\n        id: \"1\",\n        date: \"2024-01-01\",\n        name: \"Jour de l'an\",\n        country: \"FR\"\n    },\n    {\n        id: \"2\",\n        date: \"2024-05-01\",\n        name: \"F\\xeate du travail\",\n        country: \"FR\"\n    },\n    {\n        id: \"3\",\n        date: \"2024-05-08\",\n        name: \"Victoire 1945\",\n        country: \"FR\"\n    },\n    {\n        id: \"4\",\n        date: \"2024-05-09\",\n        name: \"Ascension\",\n        country: \"FR\"\n    },\n    {\n        id: \"5\",\n        date: \"2024-05-20\",\n        name: \"Lundi de Pentec\\xf4te\",\n        country: \"FR\"\n    },\n    {\n        id: \"6\",\n        date: \"2024-07-14\",\n        name: \"F\\xeate nationale\",\n        country: \"FR\"\n    },\n    {\n        id: \"7\",\n        date: \"2024-08-15\",\n        name: \"Assomption\",\n        country: \"FR\"\n    },\n    {\n        id: \"8\",\n        date: \"2024-11-01\",\n        name: \"Toussaint\",\n        country: \"FR\"\n    },\n    {\n        id: \"9\",\n        date: \"2024-11-11\",\n        name: \"Armistice\",\n        country: \"FR\"\n    },\n    {\n        id: \"10\",\n        date: \"2024-12-25\",\n        name: \"No\\xebl\",\n        country: \"FR\"\n    }\n];\n// Jours fériés français 2025\nconst FRENCH_HOLIDAYS_2025 = [\n    {\n        id: \"1\",\n        date: \"2025-01-01\",\n        name: \"Jour de l'an\",\n        country: \"FR\"\n    },\n    {\n        id: \"2\",\n        date: \"2025-05-01\",\n        name: \"F\\xeate du travail\",\n        country: \"FR\"\n    },\n    {\n        id: \"3\",\n        date: \"2025-05-08\",\n        name: \"Victoire 1945\",\n        country: \"FR\"\n    },\n    {\n        id: \"4\",\n        date: \"2025-05-29\",\n        name: \"Ascension\",\n        country: \"FR\"\n    },\n    {\n        id: \"5\",\n        date: \"2025-06-09\",\n        name: \"Lundi de Pentec\\xf4te\",\n        country: \"FR\"\n    },\n    {\n        id: \"6\",\n        date: \"2025-07-14\",\n        name: \"F\\xeate nationale\",\n        country: \"FR\"\n    },\n    {\n        id: \"7\",\n        date: \"2025-08-15\",\n        name: \"Assomption\",\n        country: \"FR\"\n    },\n    {\n        id: \"8\",\n        date: \"2025-11-01\",\n        name: \"Toussaint\",\n        country: \"FR\"\n    },\n    {\n        id: \"9\",\n        date: \"2025-11-11\",\n        name: \"Armistice\",\n        country: \"FR\"\n    },\n    {\n        id: \"10\",\n        date: \"2025-12-25\",\n        name: \"No\\xebl\",\n        country: \"FR\"\n    }\n];\n/**\n * Calcule le nombre de jours ouvrés entre deux dates\n */ function calculateWorkingDays(startDate, endDate) {\n    let holidays = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], isHalfDay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, halfDayType = arguments.length > 4 ? arguments[4] : void 0;\n    // Parse dates safely using new Date() instead of parseISO\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    // Validate dates\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n        console.error(\"Invalid date input:\", {\n            startDate,\n            endDate\n        });\n        return 0;\n    }\n    let workingDays = 0;\n    let currentDate = start;\n    while(!(0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(currentDate, end)){\n        if (!(0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_1__.isWeekend)(currentDate) && !isHoliday(currentDate, holidays)) {\n            workingDays++;\n        }\n        currentDate = (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n    }\n    // Si c'est un demi-jour, ajuster le calcul\n    if (isHalfDay && workingDays > 0) {\n        // Si c'est le même jour (début = fin), c'est 0.5 jour\n        if ((0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(start, end)) {\n            workingDays = 0.5;\n        } else {\n        // Pour les périodes de plusieurs jours, on peut ajuster selon le type de demi-jour\n        // Par défaut, on garde le calcul normal car les demi-jours sont généralement\n        // appliqués au premier ou dernier jour selon le contexte\n        }\n    }\n    return workingDays;\n}\n/**\n * Vérifie si une date est un jour férié\n */ function isHoliday(date, holidays) {\n    return holidays.some((holiday)=>{\n        const holidayDate = new Date(holiday.date);\n        // Comparer les dates en format YYYY-MM-DD pour éviter les problèmes de timezone\n        const dateStr = date.toISOString().split(\"T\")[0];\n        const holidayStr = holidayDate.toISOString().split(\"T\")[0];\n        return dateStr === holidayStr;\n    });\n}\n/**\n * Obtient les jours fériés pour une année donnée\n */ function getHolidaysForYear(year) {\n    if (year === 2024) return FRENCH_HOLIDAYS_2024;\n    if (year === 2025) return FRENCH_HOLIDAYS_2025;\n    // Pour les autres années, on peut étendre ou utiliser une API\n    return [];\n}\n/**\n * Calcule le solde de congés pour chaque type en incluant les reliquats\n */ function calculateLeaveBalances(leaves, quotas) {\n    let carryovers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], year = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new Date().getFullYear();\n    const balances = [];\n    quotas.forEach((quota)=>{\n        const yearLeaves = leaves.filter((leave)=>leave.type === quota.type && new Date(leave.startDate).getFullYear() === year);\n        const used = yearLeaves.reduce((total, leave)=>total + leave.workingDays, 0);\n        // Calculer les reliquats pour ce type de congé\n        const carryoverDays = carryovers.filter((carryover)=>carryover.type === quota.type).reduce((total, carryover)=>total + carryover.days, 0);\n        // Le total inclut le quota annuel + les reliquats\n        const totalWithCarryover = quota.yearlyQuota + carryoverDays;\n        const remaining = Math.max(0, totalWithCarryover - used);\n        balances.push({\n            type: quota.type,\n            total: totalWithCarryover,\n            used,\n            remaining,\n            carryover: carryoverDays\n        });\n    });\n    return balances;\n}\n/**\n * Calcule les reliquats disponibles pour une année donnée\n */ function calculateAvailableCarryover(carryovers) {\n    let year = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Date().getFullYear();\n    const available = {\n        cp: 0,\n        rtt: 0,\n        cet: 0,\n        sick: 0\n    };\n    carryovers.forEach((carryover)=>{\n        available[carryover.type] += carryover.days;\n    });\n    return available;\n}\n/**\n * Génère un résumé des reliquats par année\n */ function generateCarryoverSummary(carryovers) {\n    const byYear = {};\n    const byType = {\n        cp: [],\n        rtt: [],\n        cet: [],\n        sick: []\n    };\n    const totalByType = {\n        cp: 0,\n        rtt: 0,\n        cet: 0,\n        sick: 0\n    };\n    carryovers.forEach((carryover)=>{\n        // Par année\n        if (!byYear[carryover.year]) {\n            byYear[carryover.year] = [];\n        }\n        byYear[carryover.year].push(carryover);\n        // Par type\n        byType[carryover.type].push(carryover);\n        totalByType[carryover.type] += carryover.days;\n    });\n    return {\n        byYear,\n        byType,\n        totalByType\n    };\n}\n/**\n * Valide si les RTT peuvent être pris pour un mois donné\n * Les RTT s'accumulent à la fin du mois, donc on ne peut les prendre\n * que si le mois correspondant est passé\n */ function canTakeRTTForMonth(targetMonth, targetYear) {\n    let currentDate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n    const currentMonth = currentDate.getMonth() + 1; // 1-12\n    const currentYear = currentDate.getFullYear();\n    // Si on est dans une année future, on ne peut pas encore prendre les RTT\n    if (targetYear > currentYear) {\n        return {\n            canTake: false,\n            reason: \"Les RTT de \".concat(targetYear, \" ne sont pas encore disponibles\"),\n            availableDays: 0\n        };\n    }\n    // Si on est dans une année passée, on peut prendre les RTT\n    if (targetYear < currentYear) {\n        return {\n            canTake: true,\n            availableDays: 2 // 2 RTT par mois\n        };\n    }\n    // Même année : vérifier si le mois est passé\n    if (targetMonth < currentMonth) {\n        return {\n            canTake: true,\n            availableDays: 2\n        };\n    } else if (targetMonth === currentMonth) {\n        // Pour le mois en cours, on peut prendre les RTT dès le début du mois\n        return {\n            canTake: true,\n            availableDays: 2\n        };\n    } else {\n        // Mois futur\n        return {\n            canTake: false,\n            reason: \"Les RTT de ce mois ne sont pas encore disponibles\",\n            availableDays: 0\n        };\n    }\n}\n/**\n * Calcule le nombre total de RTT disponibles pour une période donnée\n */ function calculateAvailableRTTForPeriod(startDate, endDate) {\n    let currentDate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n    const details = [];\n    let totalAvailable = 0;\n    const current = new Date(startDate);\n    while(current <= endDate){\n        const month = current.getMonth() + 1;\n        const year = current.getFullYear();\n        const validation = canTakeRTTForMonth(month, year, currentDate);\n        details.push({\n            month,\n            year,\n            available: validation.availableDays,\n            canTake: validation.canTake\n        });\n        if (validation.canTake) {\n            totalAvailable += validation.availableDays;\n        }\n        // Passer au mois suivant\n        current.setMonth(current.getMonth() + 1);\n    }\n    return {\n        totalAvailable,\n        details\n    };\n}\n/**\n * Calcule le nombre total de RTT disponibles actuellement\n * (depuis le début de l'année jusqu'à maintenant)\n */ function calculateCurrentAvailableRTT() {\n    let currentDate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Date(), year = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : currentDate.getFullYear();\n    const details = [];\n    let totalAvailable = 0;\n    // Parcourir tous les mois de l'année jusqu'au mois actuel\n    for(let month = 1; month <= 12; month++){\n        const validation = canTakeRTTForMonth(month, year, currentDate);\n        details.push({\n            month,\n            available: validation.availableDays,\n            canTake: validation.canTake,\n            reason: validation.reason\n        });\n        if (validation.canTake) {\n            totalAvailable += validation.availableDays;\n        }\n    }\n    return {\n        totalAvailable,\n        details\n    };\n}\n// Nouvelle fonction pour calculer les données séparées par type (réel vs prévision)\nfunction calculateMonthlyLeaveSummarySeparated(leaves, quotas) {\n    let carryovers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], year = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new Date().getFullYear();\n    var _quotas_find, _quotas_find1, _quotas_find2, _carryovers_find, _carryovers_find1, _carryovers_find2;\n    const months = [];\n    const monthNames = [\n        \"Janvier\",\n        \"F\\xe9vrier\",\n        \"Mars\",\n        \"Avril\",\n        \"Mai\",\n        \"Juin\",\n        \"Juillet\",\n        \"Ao\\xfbt\",\n        \"Septembre\",\n        \"Octobre\",\n        \"Novembre\",\n        \"D\\xe9cembre\"\n    ];\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1; // 1-12\n    const currentYear = currentDate.getFullYear();\n    // Récupérer les quotas\n    const rttQuota = ((_quotas_find = quotas.find((q)=>q.type === \"rtt\")) === null || _quotas_find === void 0 ? void 0 : _quotas_find.yearlyQuota) || 23;\n    const cpQuota = ((_quotas_find1 = quotas.find((q)=>q.type === \"cp\")) === null || _quotas_find1 === void 0 ? void 0 : _quotas_find1.yearlyQuota) || 25;\n    const cetQuota = ((_quotas_find2 = quotas.find((q)=>q.type === \"cet\")) === null || _quotas_find2 === void 0 ? void 0 : _quotas_find2.yearlyQuota) || 5;\n    const totalCPCETQuota = cpQuota + cetQuota;\n    // Récupérer les reliquats\n    const rttCarryover = ((_carryovers_find = carryovers.find((c)=>c.type === \"rtt\")) === null || _carryovers_find === void 0 ? void 0 : _carryovers_find.days) || 0;\n    const cpCarryover = ((_carryovers_find1 = carryovers.find((c)=>c.type === \"cp\")) === null || _carryovers_find1 === void 0 ? void 0 : _carryovers_find1.days) || 0;\n    const cetCarryover = ((_carryovers_find2 = carryovers.find((c)=>c.type === \"cet\")) === null || _carryovers_find2 === void 0 ? void 0 : _carryovers_find2.days) || 0;\n    const totalCPCETCarryover = cpCarryover + cetCarryover;\n    let rttCumulReal = 0;\n    let rttCumulForecast = 0;\n    let cpCumulReal = 0;\n    let cpCumulForecast = 0;\n    for(let month = 1; month <= 12; month++){\n        // Filtrer les congés pour ce mois et cette année\n        const monthLeaves = leaves.filter((leave)=>{\n            const leaveDate = new Date(leave.startDate);\n            return leaveDate.getFullYear() === year && leaveDate.getMonth() === month - 1;\n        });\n        // Séparer les congés réels et les prévisions\n        // Si le mois est passé, les prévisions deviennent réelles\n        const isMonthPassed = year < currentYear || year === currentYear && month < currentMonth;\n        const isCurrentMonth = year === currentYear && month === currentMonth;\n        // Congés réels : tous les congés non marqués comme prévision OU les prévisions des mois passés\n        const rttReal = monthLeaves.filter((leave)=>leave.type === \"rtt\" && (!leave.isForecast || isMonthPassed)).reduce((sum, leave)=>sum + leave.workingDays, 0);\n        const cpReal = monthLeaves.filter((leave)=>leave.type === \"cp\" && (!leave.isForecast || isMonthPassed)).reduce((sum, leave)=>sum + leave.workingDays, 0);\n        // Pour les prévisions, compter les congés marqués comme prévision des mois futurs\n        // ET les congés non marqués comme prévision des mois futurs (pour simulation)\n        const rttForecast = monthLeaves.filter((leave)=>leave.type === \"rtt\" && (leave.isForecast || !isMonthPassed && !isCurrentMonth)).reduce((sum, leave)=>sum + leave.workingDays, 0);\n        const cpForecast = monthLeaves.filter((leave)=>leave.type === \"cp\" && (leave.isForecast || !isMonthPassed && !isCurrentMonth)).reduce((sum, leave)=>sum + leave.workingDays, 0);\n        // Calculer les cumuls\n        rttCumulReal += rttReal;\n        rttCumulForecast += rttForecast;\n        cpCumulReal += cpReal;\n        cpCumulForecast += cpForecast;\n        // Calculer les soldes restants (cumuls inversés)\n        const rttRemainingReal = Math.max(0, rttQuota + rttCarryover - rttCumulReal);\n        const rttRemainingForecast = Math.max(0, rttQuota + rttCarryover - rttCumulReal - rttCumulForecast);\n        const cpRemainingReal = Math.max(0, totalCPCETQuota + totalCPCETCarryover - cpCumulReal);\n        const cpRemainingForecast = Math.max(0, totalCPCETQuota + totalCPCETCarryover - cpCumulReal - cpCumulForecast);\n        months.push({\n            month,\n            monthName: monthNames[month - 1],\n            rtt: {\n                real: {\n                    taken: rttReal,\n                    cumul: rttCumulReal,\n                    remaining: rttRemainingReal\n                },\n                forecast: {\n                    taken: rttForecast,\n                    cumul: rttCumulForecast,\n                    remaining: rttRemainingForecast\n                }\n            },\n            cp: {\n                real: {\n                    taken: cpReal,\n                    cumul: cpCumulReal,\n                    remaining: cpRemainingReal\n                },\n                forecast: {\n                    taken: cpForecast,\n                    cumul: cpCumulForecast,\n                    remaining: cpRemainingForecast\n                }\n            }\n        });\n    }\n    return {\n        months,\n        yearlyTotals: {\n            rtt: {\n                real: rttCumulReal,\n                forecast: rttCumulForecast,\n                total: rttCumulReal + rttCumulForecast\n            },\n            cp: {\n                real: cpCumulReal,\n                forecast: cpCumulForecast,\n                total: cpCumulReal + cpCumulForecast\n            }\n        }\n    };\n}\n// Fonction utilitaire pour vérifier si deux congés correspondent à la même période\nfunction isSamePeriod(forecast, real) {\n    // Si c'est un seul jour, vérifier la date exacte\n    if (forecast.workingDays === 1 && real.workingDays === 1) {\n        return forecast.startDate === real.startDate;\n    }\n    // Si c'est une période, vérifier si les dates se chevauchent\n    const forecastStart = new Date(forecast.startDate);\n    const forecastEnd = new Date(forecast.endDate);\n    const realStart = new Date(real.startDate);\n    const realEnd = new Date(real.endDate);\n    // Vérifier si les périodes se chevauchent\n    return forecastStart <= realEnd && realStart <= forecastEnd;\n}\n/**\n * Génère les données du calendrier pour un mois donné\n */ function generateCalendarDays(year, month, leaves, holidays) {\n    const days = [];\n    const startDate = new Date(year, month - 1, 1);\n    const endDate = new Date(year, month, 0);\n    let currentDate = startDate;\n    while(currentDate <= endDate){\n        const dateStr = (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(currentDate, \"yyyy-MM-dd\");\n        const leave = leaves.find((l)=>{\n            const leaveStart = new Date(l.startDate);\n            const leaveEnd = new Date(l.endDate);\n            return (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(currentDate, leaveStart) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(currentDate, leaveEnd) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(currentDate, leaveStart) && (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_5__.isBefore)(currentDate, leaveEnd);\n        });\n        const holiday = holidays.find((h)=>{\n            const holidayDate = new Date(h.date);\n            return (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(currentDate, holidayDate);\n        });\n        days.push({\n            date: dateStr,\n            isLeave: !!leave,\n            leaveType: leave === null || leave === void 0 ? void 0 : leave.type,\n            isWeekend: (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_1__.isWeekend)(currentDate),\n            isHoliday: !!holiday,\n            holidayName: holiday === null || holiday === void 0 ? void 0 : holiday.name\n        });\n        currentDate = (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n    }\n    return days;\n}\n/**\n * Formate une date pour l'affichage\n */ function formatDate(date) {\n    let formatStr = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"dd/MM/yyyy\";\n    const dateObj = typeof date === \"string\" ? new Date(date) : date;\n    // Validate the date\n    if (isNaN(dateObj.getTime())) {\n        console.error(\"Invalid date for formatting:\", date);\n        return \"Date invalide\";\n    }\n    return (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(dateObj, formatStr, {\n        locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_6__.fr\n    });\n}\n/**\n * Obtient le nom du type de congé\n */ function getLeaveTypeLabel(type) {\n    return LEAVE_TYPES[type].label;\n}\n/**\n * Obtient la couleur du type de congé\n */ function getLeaveTypeColor(type) {\n    return LEAVE_TYPES[type].color;\n}\n/**\n * Obtient l'icône du type de congé\n */ function getLeaveTypeIcon(type) {\n    return LEAVE_TYPES[type].icon;\n}\n/**\n * Valide une période de congés\n */ function validateLeavePeriod(startDate, endDate, existingLeaves, excludeId) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    if ((0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(start, end)) {\n        return {\n            isValid: false,\n            error: \"La date de d\\xe9but doit \\xeatre ant\\xe9rieure \\xe0 la date de fin\"\n        };\n    }\n    // Vérifier les chevauchements avec les congés existants\n    const overlapping = existingLeaves.filter((leave)=>leave.id !== excludeId).some((leave)=>{\n        const leaveStart = new Date(leave.startDate);\n        const leaveEnd = new Date(leave.endDate);\n        return (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(start, leaveStart) && (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_5__.isBefore)(start, leaveEnd) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(end, leaveStart) && (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_5__.isBefore)(end, leaveEnd) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_5__.isBefore)(start, leaveStart) && (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_0__.isAfter)(end, leaveEnd) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(start, leaveStart) || (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_3__.isSameDay)(end, leaveEnd);\n    });\n    if (overlapping) {\n        return {\n            isValid: false,\n            error: \"Cette p\\xe9riode chevauche un cong\\xe9 existant\"\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n/**\n * Calcule les statistiques des congés\n */ function calculateLeaveStats(leaves, year) {\n    const yearLeaves = leaves.filter((leave)=>new Date(leave.startDate).getFullYear() === year);\n    const totalDays = yearLeaves.reduce((total, leave)=>total + leave.workingDays, 0);\n    const byType = {\n        cp: 0,\n        rtt: 0,\n        cet: 0,\n        sick: 0\n    };\n    const byMonth = {};\n    yearLeaves.forEach((leave)=>{\n        byType[leave.type] += leave.workingDays;\n        const leaveStart = new Date(leave.startDate);\n        const month = (0,_barrel_optimize_names_addDays_format_isAfter_isBefore_isSameDay_isWeekend_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(leaveStart, \"yyyy-MM\");\n        byMonth[month] = (byMonth[month] || 0) + leave.workingDays;\n    });\n    return {\n        totalDays,\n        byType,\n        byMonth\n    };\n}\n/**\n * Convertit une date du format français (DD/MM/YYYY) vers le format ISO (YYYY-MM-DD)\n */ function frenchDateToISO(frenchDate) {\n    if (!frenchDate || frenchDate.length !== 10) return \"\";\n    const parts = frenchDate.split(\"/\");\n    if (parts.length !== 3) return \"\";\n    const [day, month, year] = parts;\n    return \"\".concat(year, \"-\").concat(month.padStart(2, \"0\"), \"-\").concat(day.padStart(2, \"0\"));\n}\n/**\n * Convertit une date du format ISO (YYYY-MM-DD) vers le format français (DD/MM/YYYY)\n */ function isoDateToFrench(isoDate) {\n    if (!isoDate || isoDate.length !== 10) return \"\";\n    const parts = isoDate.split(\"-\");\n    if (parts.length !== 3) return \"\";\n    const [year, month, day] = parts;\n    return \"\".concat(day, \"/\").concat(month, \"/\").concat(year);\n}\n/**\n * Valide une date au format français (DD/MM/YYYY)\n */ function isValidFrenchDate(frenchDate) {\n    if (!frenchDate || frenchDate.length !== 10) return false;\n    const parts = frenchDate.split(\"/\");\n    if (parts.length !== 3) return false;\n    const [day, month, year] = parts;\n    const isoDate = \"\".concat(year, \"-\").concat(month.padStart(2, \"0\"), \"-\").concat(day.padStart(2, \"0\"));\n    const date = new Date(isoDate);\n    return !isNaN(date.getTime()) && date.getFullYear() >= 2020 && date.getFullYear() <= 2030;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/leaveUtils.ts\n"));

/***/ })

});